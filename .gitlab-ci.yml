# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.9

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  RUNNER: "True"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv/

before_script:
  - python --version
  - pip install --upgrade pip
  - pip install poetry
  - poetry --version
  - poetry config virtualenvs.in-project true # create env in .venv in project dir
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.stfc.ac.uk/".insteadOf https://gitlab.stfc.ac.uk/


stages:
  - lint
  - docs

# auto-format code using black:
lint:
  stage: lint
  script:
  - poetry install
  - poetry run pylint --errors-only hooks
  - poetry run flake8 hooks
  - poetry run isort --check hooks  # import sorting
  - poetry run black --check --diff .  # style formatting
  - poetry run mypy hooks  # static type checking for type hints

lint_report:
  stage: lint
  script:
    - poetry install
    - poetry run pylint -r y --exit-zero hooks

# test the documentation builds for commits outside main branch:
test_doc:
  stage: docs
  script:
  - poetry install --no-dev
  - cd doc
  - poetry run make html
  artifacts:
    paths:
    - doc/_build/html
  except:
  - main

# build the docs for main branch commits:
pages:
  stage: docs
  script:
  - poetry install --no-dev
  - cd doc
  - poetry run make html
  - mv doc/_build/html/ public/
  artifacts:
    paths:
    - public
  only:
  - main
